/**
 * Modulo API
 * Test description
 *
 * OpenAPI spec version: v1
 * Contact: simonokello93@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.api

import io.swagger.client.model.Login
import io.swagger.client.model.PasswordReset
import io.swagger.client.model.Register
import io.swagger.client.model.SetNewPassword
import io.swagger.client.model.TokenRefresh
import io.swagger.client.core._
import io.swagger.client.core.CollectionFormats._
import io.swagger.client.core.ApiKeyLocations._

object AuthApi {

  /**
   * 
   * Expected answers:
   *   code 201 : Login 
   * 
   * Available security schemes:
   *   Bearer (apiKey)
   * 
   * @param data 
   */
  def authLoginCreate(data: Login)(implicit apiKey: ApiKeyValue): ApiRequest[Login] =
    ApiRequest[Login](ApiMethods.POST, "https://moduloapi.herokuapp.com/api", "/auth/login/", "application/json")
      .withApiKey(apiKey, "Authorization", HEADER)
      .withBody(data)
      .withSuccessResponse[Login](201)
        /**
   * 
   * Expected answers:
   *   code 200 : SetNewPassword 
   * 
   * Available security schemes:
   *   Bearer (apiKey)
   * 
   * @param data 
   */
  def authPasswordResetCompletePartialUpdate(data: SetNewPassword)(implicit apiKey: ApiKeyValue): ApiRequest[SetNewPassword] =
    ApiRequest[SetNewPassword](ApiMethods.PATCH, "https://moduloapi.herokuapp.com/api", "/auth/password_reset_complete/", "application/json")
      .withApiKey(apiKey, "Authorization", HEADER)
      .withBody(data)
      .withSuccessResponse[SetNewPassword](200)
        /**
   * 
   * Expected answers:
   *   code 200 : SetNewPassword 
   * 
   * Available security schemes:
   *   Bearer (apiKey)
   * 
   * @param token 
   * @param uidb64 
   */
  def authPasswordResetRead(token: String, uidb64: String)(implicit apiKey: ApiKeyValue): ApiRequest[SetNewPassword] =
    ApiRequest[SetNewPassword](ApiMethods.GET, "https://moduloapi.herokuapp.com/api", "/auth/password_reset/{uidb64}/{token}/", "application/json")
      .withApiKey(apiKey, "Authorization", HEADER)
      .withPathParam("token", token)
      .withPathParam("uidb64", uidb64)
      .withSuccessResponse[SetNewPassword](200)
        /**
   * 
   * Expected answers:
   *   code 201 : Register 
   * 
   * Available security schemes:
   *   Bearer (apiKey)
   * 
   * @param data 
   */
  def authRegisterCreate(data: Register)(implicit apiKey: ApiKeyValue): ApiRequest[Register] =
    ApiRequest[Register](ApiMethods.POST, "https://moduloapi.herokuapp.com/api", "/auth/register/", "application/json")
      .withApiKey(apiKey, "Authorization", HEADER)
      .withBody(data)
      .withSuccessResponse[Register](201)
        /**
   * 
   * Expected answers:
   *   code 201 : PasswordReset 
   * 
   * Available security schemes:
   *   Bearer (apiKey)
   * 
   * @param data 
   */
  def authResetPasswordCreate(data: PasswordReset)(implicit apiKey: ApiKeyValue): ApiRequest[PasswordReset] =
    ApiRequest[PasswordReset](ApiMethods.POST, "https://moduloapi.herokuapp.com/api", "/auth/reset_password/", "application/json")
      .withApiKey(apiKey, "Authorization", HEADER)
      .withBody(data)
      .withSuccessResponse[PasswordReset](201)
        /**
   * Takes a refresh type JSON web token and returns an access type JSON web token if the refresh token is valid.
   * 
   * Expected answers:
   *   code 201 : TokenRefresh 
   * 
   * Available security schemes:
   *   Bearer (apiKey)
   * 
   * @param data 
   */
  def authTokenRefreshCreate(data: TokenRefresh)(implicit apiKey: ApiKeyValue): ApiRequest[TokenRefresh] =
    ApiRequest[TokenRefresh](ApiMethods.POST, "https://moduloapi.herokuapp.com/api", "/auth/token/refresh/", "application/json")
      .withApiKey(apiKey, "Authorization", HEADER)
      .withBody(data)
      .withSuccessResponse[TokenRefresh](201)
        /**
   * 
   * Expected answers:
   *   code 200 :  
   * 
   * Available security schemes:
   *   Bearer (apiKey)
   * 
   * @param token Description
   */
  def authVerifyEmailList(token: Option[String] = None)(implicit apiKey: ApiKeyValue): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.GET, "https://moduloapi.herokuapp.com/api", "/auth/verify_email/", "application/json")
      .withApiKey(apiKey, "Authorization", HEADER)
      .withQueryParam("token", token)
      .withSuccessResponse[Unit](200)
      

}

